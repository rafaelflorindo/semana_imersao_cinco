{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\giova\\\\Desktop\\\\node_js\\\\semana_imersao_cinco\\\\site\\\\pages\\\\cadastrar.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState } from 'react';\nimport { Jumbotron, Button } from 'reactstrap';\n\nfunction Cadastrar() {\n  const {\n    0: meta,\n    1: setMeta\n  } = useState({\n    name: '',\n    description: '',\n    status: ''\n  });\n  const {\n    0: response,\n    1: setResponse\n  } = useState({\n    formSave: false,\n    type: '',\n    message: ''\n  });\n\n  const onChangeInput = e => setMeta(_objectSpread(_objectSpread({}, meta), {}, {\n    [e.target.name]: e.target.value\n  }));\n\n  const sendMeta = async e => {\n    e.preventDefault();\n    setResponse({\n      formSave: true\n    });\n\n    try {\n      const res = await fetch('http://localhost:8080/metas', {\n        method: 'POST',\n        body: JSON.stringify(meta),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      const responseEnv = await res.json();\n\n      if (responseEnv.error) {\n        setResponse({\n          formSave: false,\n          type: 'error',\n          message: responseEnv.message\n        }); //console.log(responseEnv.message);\n      } else {\n        setResponse({\n          formSave: false,\n          type: 'success',\n          message: responseEnv.message\n        }); //console.log(responseEnv.message);\n      }\n    } catch (err) {\n      setResponse({\n        formSave: false,\n        type: 'error',\n        message: 'erro: Meta não cadastrada com sucesso, tente mais tarde!!!'\n      }); //console.log(\"erro: Meta não cadastrada com sucesso, tente mais tarde!!!\");\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Jumbotron, {\n      fluid: true,\n      className: \"form\",\n      children: [/*#__PURE__*/_jsxDEV(\"style\", {\n        children: `.form{\n                        background-color:#171941;\n                        color: #bf38ac;\n                        padding-top: 30px;\n                        padding-bottom: 150px;\n                        \n                    }`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Cadastrar minha meta\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this), response.type === 'error' ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: response.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 46\n      }, this) : \"\", response.type === 'success' ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: response.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 48\n      }, this) : \"\", /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: sendMeta,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Nome\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"name\",\n          id: \"name\",\n          placeholder: \"Nome da meta\",\n          onChange: onChangeInput\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 27\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Descri\\xE7\\xE3o\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"description\",\n          id: \"description\",\n          placeholder: \"Descri\\xE7\\xE3o da meta\",\n          onChange: onChangeInput\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 27\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Status\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"status\",\n          id: \"status\",\n          placeholder: \"Status da meta\",\n          onChange: onChangeInput\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 27\n        }, this), response.formSave ? /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          disabled: true,\n          children: \"Enviando\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 42\n        }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Cadastrar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 93\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 9\n  }, this);\n}\n\nexport default Cadastrar;","map":{"version":3,"sources":["C:/Users/giova/Desktop/node_js/semana_imersao_cinco/site/pages/cadastrar.js"],"names":["React","useState","Jumbotron","Button","Cadastrar","meta","setMeta","name","description","status","response","setResponse","formSave","type","message","onChangeInput","e","target","value","sendMeta","preventDefault","res","fetch","method","body","JSON","stringify","headers","responseEnv","json","error","err"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport { Jumbotron, Button } from 'reactstrap';\r\n\r\n\r\n\r\nfunction Cadastrar() {\r\n    const [meta, setMeta] = useState({\r\n        name: '',\r\n        description: '',\r\n        status: ''\r\n    });\r\n    const [response, setResponse] = useState({\r\n        formSave: false,\r\n        type: '',\r\n        message: ''\r\n    });\r\n    const onChangeInput = e => setMeta({ ...meta, [e.target.name]: e.target.value });\r\n\r\n    const sendMeta = async e => {\r\n        e.preventDefault();\r\n\r\n        setResponse({ formSave: true });\r\n\r\n        try {\r\n            const res = await fetch('http://localhost:8080/metas', {\r\n                method: 'POST',\r\n                body: JSON.stringify(meta),\r\n                headers: { 'Content-Type': 'application/json' }\r\n            });\r\n\r\n            const responseEnv = await res.json();\r\n\r\n            if (responseEnv.error) {\r\n                setResponse({\r\n                    formSave: false,\r\n                    type: 'error',\r\n                    message: responseEnv.message\r\n                });\r\n                //console.log(responseEnv.message);\r\n            } else {\r\n                setResponse({\r\n                    formSave: false,\r\n                    type: 'success',\r\n                    message: responseEnv.message\r\n                });\r\n                //console.log(responseEnv.message);\r\n            }\r\n        } catch (err) {\r\n            setResponse({\r\n                formSave: false,\r\n                type: 'error',\r\n                message: 'erro: Meta não cadastrada com sucesso, tente mais tarde!!!'\r\n            });\r\n            //console.log(\"erro: Meta não cadastrada com sucesso, tente mais tarde!!!\");\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Jumbotron fluid className=\"form\">\r\n                <style>\r\n                    {`.form{\r\n                        background-color:#171941;\r\n                        color: #bf38ac;\r\n                        padding-top: 30px;\r\n                        padding-bottom: 150px;\r\n                        \r\n                    }`}\r\n                </style>\r\n                <h1>Cadastrar minha meta</h1>\r\n                <hr />\r\n\r\n                {response.type === 'error' ? <p>{response.message}</p> : \"\"}\r\n                {response.type === 'success' ? <p>{response.message}</p> : \"\"}\r\n\r\n\r\n                <form onSubmit={sendMeta}>\r\n                    <label>Nome</label>\r\n                    <input type=\"text\"\r\n                        name=\"name\"\r\n                        id=\"name\"\r\n                        placeholder=\"Nome da meta\"\r\n                        onChange={onChangeInput}\r\n\r\n                    />\r\n                    <br /><br />\r\n                    <label>Descrição</label>\r\n                    <input type=\"text\"\r\n                        name=\"description\"\r\n                        id=\"description\"\r\n                        placeholder=\"Descrição da meta\"\r\n                        onChange={onChangeInput}\r\n                    />\r\n                    <br /><br />\r\n\r\n                    <label>Status</label>\r\n                    <input type=\"text\"\r\n                        name=\"status\"\r\n                        id=\"status\"\r\n                        placeholder=\"Status da meta\"\r\n                        onChange={onChangeInput}\r\n                    />\r\n                    <br /><br />\r\n\r\n                    {response.formSave ? <button type=\"submit\" disabled>Enviando</button> : <button type=\"submit\">Cadastrar</button>}\r\n                </form>\r\n            </Jumbotron>\r\n        </div>\r\n    );\r\n}\r\nexport default Cadastrar;"]},"metadata":{},"sourceType":"module"}